//mark.lawrence
//app.module.js

(function () {
    angular.module('app',
    [
        //application modules
        'app.core',
        'app.service',
        'app.filter',

        //feature areas
        'app.nav',
        'app.users',
        'app.events', 
        'app.demographics',
        'app.donortax'
        //'app.template',
        //'app.mailers',
        
    ]);
})();
//core.module.js
//mark.lawrence

(function () {
    angular.module('app.core',
        [
            //angular modules
            'ngMessages',
            'angularLocalStorage',
            'ngRoute',
            'ngAnimate',

            //custom modules
            'blocks.logger',
            'blocks.exception',

            //third party modules
            'smart-table',
            'ui.bootstrap',
            'ngTagsInput',
            'ngFileUpload',
            'rzModule',
            'switcher',
            'gfl.textAvatar',
            'textAngular',
            'ui.bootstrap.datetimepicker', 
            'angular-confirm' 
        ])
        .constant('toastr', toastr)
        .constant('moment', moment);

})();
//config.js
//mark.lawrence
(function () {
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.positionClass = 'toast-bottom-right';
    };

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var apiEndPoints = {
        User: 'users',
        Constituent: 'constituent',
        Tax: 'tax',
        Template: 'template',
        Campaign: 'campaign',
        Mailer: 'mailer',
        Reason: 'reason',
        Event: 'event',
        Guest: 'guest',
        File: 'file', 
        Demographic: 'demographics'
    };

    var config = {
        appErrorPrefix: '[DG Error] ', //Configure the exceptionHandler decorator
        appTitle: 'DonorGateway',
        version: '1.0.0',
        apiUrl: 'http://' + window.location.host + '/api/',
        keyCodes: keyCodes,
        apiEndPoints: apiEndPoints
    };

    var defaults = {
        EMAIL_SUFFIX: '@splcenter.org',
        GENERIC_PASSWORD: '1P@ssword'
    };

    angular.module('app.core')
        .config(toastrConfig)
        .constant('config', config)
        .value('defaults', defaults);
})();
//mark.lawrence
//exception.module.js

(function () {
    angular.module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular.module('blocks.logger', []);
})();
//mark.lawrence
//demographics.module.js

(function() {
	
    'use strict';

    angular.module('app.demographics', []);

})();
//mark.lawrence
//donortax.module.js

(function() {
    angular.module('app.donortax', []);
})();
//mark.lawrence
//event.module.js

(function () {
    angular.module('app.events', []);
})();
//filter.module.js
//mark.lawrence

(function () {
    angular.module('app.filter', []);
})();
//mark.lawrence
//nav.module.js

(function () {
    angular.module('app.nav', []);
})();
//service.module.js
//mark.lawrence

(function () {
    angular.module('app.service', []);
})();
(function () {
    'use strict';

    angular.module('app.users', []);
})();
//mark.lawrence
//exception-handler.provider.js

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function () {
            return { config: this.config };
        };
    };

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    };

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function (exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = { exception: exception, cause: cause };
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    };
})();
//mark.lawrence
//exception.js

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };

        return service;

        function catcher(message) {
            return function (reason) {
                logger.error(message, reason);
            };
        };
    };
})();
//mark.lawrence
//logger.js

(function () {
    'use strict';

    angular.module('blocks.logger').factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        };

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        };

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        };

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        };
    };
})();
//mark.lawrence
//demographics.js

(function() {
    'use strict'; 

    var controllerId = 'DemographicsController';

    angular.module('app.demographics').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'demographicService'];

    function UserController(logger, service) {
        var vm = this;
        vm.title = 'Demographic Updates';
        vm.description = 'Updates made to constituent data'; 
        vm.subTitle = 'Demographics';

        vm.demographics = [];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getDemographics();
        };


        function getDemographics() {
            service.get(1, 20)
                .then(function(data) {
                    vm.demographics = data;
                });
        }

        vm.delete = function(demo) {
            vm.isBusy = true;
            service.remove(demo.id)
                .then(function (data) {
                    logger.success('Deleted ' + demo.name);
                    var idx = vm.demographics.indexOf(demo);
                    vm.demographics.splice(idx, 1);
                }).finally(function() {
                    vm.isBusy = false; 
                });
        }

        vm.deleteAll = function () {
            vm.isBusy = true;
            service.removeAll()
                .then(function (data) {
                    logger.success(data);
                    vm.demographics = []; 
                }).finally(function () {
                    vm.isBusy = false;
                });

        }

        vm.export = function () {
            vm.isBusy = true;
            service.exportList()
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    vm.isBusy = false;
                });
        }
    }

})();
//mark.lawrence
//clear-key.directive.js

(function () {
    angular.module('app').directive("clearKey", function () {
        return {
            restrict: 'EA',
            require: 'ngModel',
            link: function (scope, el, attrs, ctrl) {
                el.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    ctrl.$setViewValue(null);
                    ctrl.$render();
                    scope.$apply();
                });
            }
        };
    });
})();
//mark.lawrence
//date-before.directive.js

(function () {
    angular.module('app').directive('dateBefore', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elem, attrs, ngModel) {
                if (!ngModel) return; // do nothing if no ng-model
                debugger;
                var dateBefore = attrs.dateBefore;
                console.log('date', dateBefore);

                // watch own value and re-validate on change
                scope.$watch(attrs.ngModel, function () {
                    validate();
                });

                // observe the other value and re-validate on change
                attrs.$observe('dateGreaterAndEqual', function (val) {
                    validate();
                });

                var validate = function () {
                    // values
                    var dateTo = angular.isDefined(ngModel.$viewValue) === true && !_.isNull(ngModel.$viewValue) ? moment(ngModel.$viewValue).toDate() : null;
                    var dateFrom = attrs.dateGreaterAndEqual !== "" ? moment(attrs.dateGreaterAndEqual.replace('"', '').replace('\\', '').replace('"', '')).toDate() : null;
                    //passing date with braces around it causes and issue therfore we need to use replace

                };
            }
        };
    });


})();
//mark.lawrence
//date-format.directive.js

(function () {
    angular.module('app')
        .directive('dateFormat',
            function (dateFilter, $parse) {
                return {
                    restrict: 'EAC',
                    require: '?ngModel',
                    link: function (scope, element, attrs, ngModel, ctrl) {
                        ngModel.$parsers.push(function (viewValue) {
                            return dateFilter(viewValue, 'MM/dd/yyyy h:mm a');
                        });
                    }
                }
            });
})();
//mark.lawrence
//date-input.directive.js

(function () {
    angular.module('app').directive('dateInput', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                var moment = $window.moment;
                var dateFormat = attrs.dateInput;
                attrs.$observe('dateInput', function (newValue) {
                    if (dateFormat === newValue || !ctrl.$modelValue) return;
                    dateFormat = newValue;
                    ctrl.$modelValue = new Date(ctrl.$setViewValue);
                });

                ctrl.$formatters.unshift(function (modelValue) {
                    scope = scope;
                    if (!dateFormat || !modelValue) return "";
                    var retVal = moment(modelValue).format(dateFormat);
                    return retVal;
                });

                ctrl.$parsers.unshift(function (viewValue) {
                    scope = scope;
                    var date = moment(viewValue, dateFormat);
                    return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
                });
            }
        };
    });
})();
//mark.lawrence
//smart-table.clearKey.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: '^stTable',
            link: function (scope, element, attrs, ctrl) {
                element.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    return scope.$apply(function () {
                        var fieldName = element.context.attributes['st-search'].value;
                        var tableState = ctrl.tableState();
                        tableState.search.predicateObject[fieldName] = '';
                        return ctrl.pipe();
                    });
                });
            }
        };
    });
})();
(function() {


    var app = angular.module('app');

    app.directive('toggleCheckbox', function($timeout) {

        /**
     * Directive
     */
        return {
            restrict: 'A',
            transclude: true,
            replace: false,
            require: 'ngModel',
            link: function($scope, $element, $attr, ngModel) {

                // update model from Element
                var updateModelFromElement = function() {
                    // If modified
                    var checked = $element.prop('checked');
                    if (checked !== ngModel.$viewValue) {
                        // Update ngModel
                        ngModel.$setViewValue(checked);
                        $scope.$apply();
                    }
                };

                // Update input from Model
                var updateElementFromModel = function(newValue) {
                    $element.trigger('change');
                };

                // Observe: Element changes affect Model
                $element.on('change', function() {
                    updateModelFromElement();
                });

                $scope.$watch(function() {
                    return ngModel.$viewValue;
                }, function(newValue) {
                    updateElementFromModel(newValue);
                }, true);

                // Initialise BootstrapToggle
                $element.bootstrapToggle();
            }
        };
    });
})();
//mark.lawrence
//donortax.js

(function() {
    'use strict';

    var controllerId = 'DonorTaxController';

    angular.module('app.donortax').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModal' ];

    function mainController(logger, $modal) {
        var vm = this;
        vm.title = 'Donor Tax Manager';
    }

})();
//mark.lawrence
//createEvent.controller.js

(function() {
	
    'use strict';

    var controllerId = 'CreateEventController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModalInstance', 'eventService'];

    function mainController(logger, $modal, service) {
        var vm = this;
        vm.title = 'Create Event';
        
        vm.dateFormat = "MM/DD/YYYY hh:mm";

        vm.event = {
            startDate: new Date(),
            capacity: 1,
            template: {}
        };

        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.save = function () {
            vm.event.template.name = vm.event.name;
            service.create(vm.event)
                .then(function (data) {
                    $modal.close(data);
                });
        }
    }

})();
//mark.lawrence
//editGuest.controller.js

(function () {
    'use strict';

    var controllerId = 'CreateGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'eventService', 'event'];

    function mainController($scope, logger, $modal, service, event) {
        var vm = this;
        vm.title = 'Create Guest';
       
        vm.guest = {
            finderNumber: '00000000000', 
            eventId: event.id
        };

        vm.ticketCountList = [];
        for (var i = 1; i < event.ticketAllowance + 1; i++) {
            vm.ticketCountList.push(i);
        }

        vm.decrementTickets = function () {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets--;
        }

        vm.incrementTickets = function (e) {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets++;
        }

        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.changeAttending = function () {
            if (vm.guest.isAttending) {
                vm.guest.ticketCount = 1;
            } else {
                vm.guest.ticketCount = null;
            }
        }

        vm.save = function () {
            service.registerGuest(vm.guest)
                            .then(function (data) {
                                angular.extend(vm.guest, data);
                                $modal.close(vm.guest);
                            });
        }
    }


})();
//mark.lawrence
//editGuest.controller.js

(function () {
    'use strict';

    var controllerId = 'EditGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'eventService', 'guest'];

    function mainController($scope, logger, $modal, service, guest) {
        var vm = this;
        vm.title = 'Edit Guest';

        if (guest.isAttending) {
            vm.showAddTicket = true;
            guest.additionalTickets = 0;
        }

        vm.guest = angular.copy(guest);
        logger.log('guest', guest);
        logger.log('vm.guest', vm.guest);

        vm.ticketCountList = [];
        for (var i = 1; i < guest.event.ticketAllowance + 1; i++) {
            vm.ticketCountList.push(i);
        }
        
        vm.decrementTickets = function () {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets--;
        }

        vm.incrementTickets = function (e) {
            $scope.editGuestForm.$pristine = false; 
            vm.guest.additionalTickets++;
        }
        
        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.changeAttending = function () {
            if (vm.guest.isAttending) {
                vm.guest.ticketCount = 1;
            } else {
                vm.guest.ticketCount = null;
            }
        }

        vm.save = function () {

            if (vm.showAddTicket) {
                service.addTicket(vm.guest)
                    .then(function (data) {
                        angular.extend(vm.guest, data);
                        $modal.close(vm.guest);
                    });
            } else {
                service.registerGuest(vm.guest)
                    .then(function(data) {
                        angular.extend(vm.guest, data);
                        $modal.close(vm.guest);
                    });
            }
        }
    }


})();
//mark.lawrence
//events.js

(function () {
    'use strict';

    var controllerId = 'EventController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModal', 'eventService', 'guestService', 'templateService'];

    function mainController(logger, $modal, service, guestService, templateService) {
        var vm = this;
        vm.title = 'Event Manager';
        var tableStateRef;
        var pageSizeDefault = 10;

        var choices = [
            { id: 1, name: "Register", command: function (e) { vm.registerGuest(e) }, icon: 'icon ion-key', default: true },
            { id: 2, name: "Mail Ticket", command: function (e) { vm.mailTicket(e) }, icon: 'icon ion-android-mail', default: false },
            { id: 3, name: "Cancel", command: function (e) { vm.cancelGuest(e) }, icon: 'icon ion-android-cancel', default: false },
            { id: 4, name: "Guest List", command: function (e) { vm.addToMailQueue(e) }, icon: 'icon ion-android-add-circle', default: false },
            { id: 5, name: "Add Tickets", command: function (e) { vm.registerGuest(e) }, icon: 'icon ion-android-add-circle', default: false }
        ];

        //TODO: hostLocation needs to be dynamic to environment
        vm.hostLocation = 'localhost:54505/';

        vm.title = 'Event Manager';
        vm.description = "Manage Donor Events";
        vm.currentDate = new Date();

        vm.dateOptions = {
            dateDisabled: false,
            formatYear: 'yy',
            maxDate: new Date(2020, 5, 22),
            minDate: new Date(),
            startingDay: 1
        };

        vm.dateFormat = "MM/DD/YYYY h:mm a";
        vm.events = [];

        vm.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        vm.tabs = [
            { title: 'Details', template: 'app/events/views/home.html', active: false, icon: 'fa-info-circle' },
            { title: 'Guests', template: 'app/events/views/guest-list.html', active: true, icon: 'fa-users' },
            //{ title: 'Mail Queue', template: 'app/events/views/mail-queue.html', active: false, icon: '' },
            //{ title: 'Waiting Queue', template: 'app/events/views/wait-queue.html', active: false, icon: '' },
            { title: 'Template', template: 'app/events/views/template.html', active: false, icon: 'fa-file-text' }
        ];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getEvents().then(function () {
                vm.selectedEvent = vm.events[0];
                vm.changeEvent();

                logger.log('loaded events');
            });
        }

        vm.addToMailQueue = function (guest) {
            vm.isBusy = true;
            service.addToMail(guest)
                .then(function (data) {
                    logger.info('Moved Guest ' + data.name + 'Send Ticket: ');
                    angular.extend(guest, data);
                    var event = angular.copy(vm.selectedEvent);
                    angular.extend(vm.selectedEvent, guest.event);
                    vm.selectedEvent.guests = event.guests;
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.cancelGuest = function (guest) {
            service.cancelGuest(guest)
                .then(function (result) {
                    logger.log('result', result);
                    angular.extend(guest, result);
                    var event = angular.copy(vm.selectedEvent);
                    angular.extend(vm.selectedEvent, result.event);
                    vm.selectedEvent.guests = event.guests;
                });
        }

        vm.changeEvent = function () {
            if (!vm.selectedEvent) return;
            //RESET VALUES
            vm.searchModel = {
                page: 1,
                pageSize: pageSizeDefault,
                orderBy: 'id',
                orderDirection: 'asc'
            };
            vm.showWaitList = false;
            vm.showMailQueue = false;
            vm.tabs[0].active = true;

            vm.isBusy = true;
            service.getById(vm.selectedEvent.id)
                .then(function (data) {
                    angular.extend(vm.selectedEvent, data);
                }).finally(function () {
                    vm.isBusy = false;
                    vm.searchGuests(tableStateRef);
                });

        }

        vm.refreshGuests = function () {
            vm.searchGuests(tableStateRef);
        }

        vm.deleteEvent = function (id) {
            //TODO: Confirmation on delete
            vm.isBusy = true;
            service.remove(id)
                .then(function () {
                    vm.selectedEvent = undefined;
                    logger.success('Deleted event');
                }).finally(function () {
                    vm.isBusy = false;
                    getEvents();
                });
        }

        vm.exportGuests = function () {
            vm.isBusy = true;
            service.downloadGuests(vm.selectedEvent.id, vm.searchModel)
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.createGuest = function () {

            $modal.open({
                templateUrl: '/app/events/views/edit-guest.html',
                controller: 'CreateGuestController',
                controllerAs: 'vm',
                resolve: {
                    event: vm.selectedEvent
                }
            }).result.then(function (result) {

                var event = angular.copy(vm.selectedEvent);
                angular.extend(vm.selectedEvent, result.event);
                vm.selectedEvent.guests = event.guests;

                vm.selectedEvent.guests.unshift(result);
            });
        }

        vm.registerGuest = function (guest) {

            $modal.open({
                templateUrl: '/app/events/views/edit-guest.html',
                controller: 'EditGuestController',
                controllerAs: 'vm',
                resolve: {
                    guest: guest
                }
            }).result.then(function (result) {
                angular.extend(guest, result);
                var event = angular.copy(vm.selectedEvent);
                angular.extend(vm.selectedEvent, result.event);
                vm.selectedEvent.guests = event.guests;
                guest = null;
            });
        }

        vm.toggleWaiting = function () {
            vm.showWaiting = !vm.showWaiting;
            vm.showMail = false;
            vm.showSent = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.toggleMail = function () {
            vm.showMail = !vm.showMail;
            vm.showWaiting = false;
            vm.showSent = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.toggleSent = function () {
            vm.showSent = !vm.showSent;
            vm.showWaiting = false;
            vm.showMail = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.mailAllTickets = function () {
            vm.isBusy = true;
            service.mailAllTickets(vm.selectedEvent.id)
                .then(function (data) {
                    angular.extend(vm.selectedEvent, data);
                    vm.searchGuests(tableStateRef);
                    vm.isBusy = false;
                });
        }

        vm.mailTicket = function (guest) {
            vm.isBusy = true;
            service.mailTicket(guest)
                        .then(function (data) {
                            angular.extend(guest, data);

                            logger.success('Issued ticket to: ' + guest.name);

                            var event = angular.copy(vm.selectedEvent);
                            angular.extend(vm.selectedEvent, guest.event);
                            vm.selectedEvent.guests = event.guests;

                        }).finally(function () {
                            vm.isBusy = false;
                        });
        }

        vm.searchGuests = function (tableState) {
            tableStateRef = tableState;
            if (!vm.selectedEvent) return false;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                vm.searchModel.orderBy = tableState.sort.predicate;
                vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }
            if (typeof (tableState.search.predicateObject) !== "undefined") {
                vm.searchModel.name = tableState.search.predicateObject.name;
                vm.searchModel.address = tableState.search.predicateObject.address;
                vm.searchModel.city = tableState.search.predicateObject.city;
                vm.searchModel.state = tableState.search.predicateObject.state;
                vm.searchModel.zipcode = tableState.search.predicateObject.zipcode;
                vm.searchModel.ticketCount = tableState.search.predicateObject.ticketCount;
                vm.searchModel.constituentType = tableState.search.predicateObject.constituentType;
                vm.searchModel.phone = tableState.search.predicateObject.phone;
                vm.searchModel.email = tableState.search.predicateObject.email;
                vm.searchModel.accountId = tableState.search.predicateObject.accountId;
                vm.searchModel.finderNumber = tableState.search.predicateObject.finderNumber;
                vm.searchModel.isMailed = tableState.search.predicateObject.isMailed;
            }

            vm.searchModel.isAttending = null;
            vm.searchModel.isWaiting = null;
            vm.searchModel.isMailed = null;

            if (vm.showWaiting) {
                vm.searchModel.isWaiting = vm.showWaiting ? vm.showWaiting : null;
            }

            if (vm.showMail) {
                vm.searchModel.isWaiting = false;
                vm.searchModel.isMailed = false;
                vm.searchModel.isAttending = true;
            }

            if (vm.showSent) {
                vm.searchModel.isWaiting = false;
                vm.searchModel.isMailed = true;
                vm.searchModel.isAttending = true;
            }

            vm.isBusy = true;
            return service.getGuests(vm.selectedEvent.id, vm.searchModel)
                .then(function (data) {

                    vm.selectedEvent.guests = data.items;

                    vm.selectedEvent.guests = vm.selectedEvent.guests.map(function (guest) {

                        var options = [];

                        if (guest.isAttending == null) options.push(choices[0]);
                        if (guest.isAttending && !guest.isWaiting && !guest.isMailed) {
                            
                            options.push(choices[1]);
                        }
                        if (guest.isWaiting) {
                            options.push(choices[3]);
                        }
                        if (guest.isAttending) {
                            options.push(choices[4]);
                        }
                        if (guest.isAttending != null) options.push(choices[2]);

                        guest.primaryChoice = angular.copy(options[0]);
                        options.shift();

                        return angular.extend(guest, { choices: options });
                    });
                    vm.searchModel = data;
                    vm.isBusy = false;
                });

        }

        vm.paged = function paged() {
            vm.searchGuests(tableStateRef);
        };

        vm.saveEvent = function (form) {
            vm.isBusy = true;
            return service.update(vm.selectedEvent)
                .then(function (data) {
                    var guests = vm.selectedEvent.guests;
                    angular.extend(vm.selectedEvent, data);

                    vm.selectedEvent.guests = guests;
                    logger.success('Saved Event: ' + data.name);
                })
                .finally(function () {
                    form.$setPristine();
                    vm.isBusy = false;
                });
        }

        vm.fileSelected = function ($files, $file) {
            //TODO: Called multiple times. Error on directory selection of file. 
            var reader = new FileReader();
            reader.onloadstart = function () {
                vm.isBusy = true;
            };
            reader.onloadend = function () {
                vm.isBusy = false;
            }
            reader.onload = function () {
                var dataUrl = reader.result;
                vm.selectedEvent.template.image = dataUrl.split(",")[1];
                vm.selectedEvent.template.mimeType = $file.type;
            };
            reader.readAsDataURL($file);

        };

        vm.saveTemplate = function () {
            vm.isBusy = true;
            templateService.update(vm.selectedEvent.template)
                .then(function (data) {
                    vm.selectedEvent.template = angular.extend(vm.selectedEvent.template, data);
                    logger.success('Saved template: ' + data.name);
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.toggleCancel = function (form) {
            vm.selectedEvent.isCancelled = !vm.selectedEvent.isCancelled;
            vm.saveEvent(form).then(function () {
                if (vm.selectedEvent.isCancelled) {
                    logger.warning('Cancelled event');
                } else {
                    logger.info('Restored event');
                }
            });
        }

        vm.showCreateEvent = function () {
            $modal.open({
                templateUrl: '/app/events/views/create-event.html',
                controller: 'CreateEventController',
                controllerAs: 'vm'
            }).result.then(function (data) {
                vm.selectedEvent = data;
                vm.events.unshift(vm.selectedEvent);
                logger.success('Successfully created ' + data.name);
            });
        }

        vm.showGuestUpload = function () {
            $modal.open({
                keyboard: false,
                backdrop: 'static',
                templateUrl: '/app/events/views/guest-upload.html',
                //controller: ['logger', '$uibModalInstance', 'fileService', 'selectedEvent', UploadGuestController],
                controller: 'UploadGuestController',
                controllerAs: 'vm',
                resolve: {
                    event: vm.selectedEvent
                }
            }).result.then(function (result) {
                if (result.success) {
                    logger.success(result.message);
                } else {
                    logger.error(result.message);
                }
                vm.changeEvent();
            });
        }

        function getEvents() {
            vm.isBusy = true;
            return service.get()
                .then(function (data) {
                    vm.events = data;
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

    };

})();
//mark.lawrence
//uploadGuest.controller.js

(function() {
	
    'use strict';

    var controllerId = 'UploadGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModalInstance', 'fileService', 'event'];

    function mainController(logger, $modal, service, event) {
        var vm = this;
        vm.title = 'Edit Guest';

        vm.event = event;

        vm.cancel = function () {
            vm.file = undefined;
            $modal.dismiss();
        }

        vm.fileSelected = function ($file, $event) {
            vm.result = null;
        };
        
        vm.save = function () {
            vm.isBusy = true;
            vm.result = {
                success: false
            }

            service.guest(vm.event.id, vm.file)
                    .then(function (data) {
                        vm.result.success = true;
                        vm.result.message = data;
                    }).catch(function (error) {
                        vm.result.message = error.data.message;
                    }).finally(function () {
                        vm.file = undefined;
                        vm.isBusy = false;
                        $modal.close(vm.result);
                    });
        }
    }

})();
//app.filter.js
//mark.lawrence

angular.module('app.filter').filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);

angular.module('app.filter', []).filter('checkmark', function () {
    return function (input) {
        return input ? '\u2713' : '\u2718';
    };
});

angular.module('app.filter').filter('yesNo', function () {
    return function (input) {
        return input ? 'Yes' : 'No';
    }
});

angular.module('app.filter').filter('updateStatus', function () {
    return function (input) {
        if (input === 1) {
            return 'Unchanged';
        }
        if (input === 2) {
            return 'Changed';
        }
        if (input === 6) {
            return 'Reconciled';
        }
        return "";
    };
});
//mark.lawrence
//nav.js

(function () {
    'use strict';

    var controllerId = 'NavController';

    angular.module('app.nav').controller(controllerId, mainController);

    mainController.$inject = ['logger'];

    function mainController(logger) {
        var vm = this;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            vm.user = JSON.parse(localStorage.getItem('currentUser'));
        }
    };
})();
//template.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'demographicService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Demographic;

        var service = {
            get: get,
            remove: remove,
            removeAll: removeAll, 
            exportList: exportList
        }

        return service;

        function get(page, size) {
            return $http.get(url + '?page=' + page + '&pagesize=' + size)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success).catch(error);
        }

        function removeAll() {
            return $http.delete(url).then(_success).catch(error);
        }

        function _success(response) {
            return response.data;
        };

        function error(error) {
            return error.data.message;
        }

        function exportList() {
            return $http.post(url + '/export')
              .then(function (data) {
                  return data;
              }).catch(error);
        }
    }
})();
//mark.lawrence
//event.service.js

(function () {
    'use strict';

    var serviceId = 'eventService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Event;
        var service = {
            cancelGuest: cancelGuest, 
            create: create,
            downloadGuests: downloadGuests, 
            remove: remove,
            get: get,
            getById: getById,
            getGuests: getGuests, 
            query: query,
            update: update,
            addToMail: addToMail, 
            registerGuest: registerGuest,
            mailTicket: mailTicket,
            mailAllTickets: mailAllTickets,
            addTicket: addTicket
        }
        return service;

        function cancelGuest(guest) {
            return $http.post(url + '/' + guest.eventId + '/CancelRegistration', guest).then(_success).catch(error);
        }

        function create(event) {
            return $http.post(url, event)
                .then(_success).catch(error);
        }

        function downloadGuests(id, vm) {
            return $http.post(url + '/' + id + '/guests/export', vm)
                .then(function(data) {
                    return data;
                }).catch(error);
        }


        function remove(id) {
            return $http.delete(url + '/' + id).then(_success).catch(error);
        };

        function get() {
            return $http.get(url)
                .then(_success).catch(error);
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(_success).catch(error);
        }

        function getGuests(id, vm) {
            return $http.post(url + '/' + id + '/guests', vm)
                .then(_success).catch(error);
        }

        function mailAllTickets(eventId) {
            return $http.put(url + '/' + eventId + '/mailalltickets').then(_success).catch(error);
        }

        function mailTicket(guest) {
            return $http.post(url + '/' + guest.eventId + '/mailticket', guest).then(_success).catch(error);
        }
        
        function addTicket(guest) {
            return $http.post(url + '/' + guest.eventId + '/addticket', guest).then(_success).catch(error);
        }

        function addToMail(guest) {
            return $http.post(url + '/' + guest.eventId + '/addtomail', guest).then(_success).catch(error);
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(_success).catch(error);
        }

        function registerGuest(guest) {
            return $http.post(url + '/' + guest.eventId + '/registerguest' , guest).then(_success).catch(error);
        }

        function update(event) {
            return $http.put(url, event)
                .then(_success).catch(error);
        }

        function _success(response) {
            return response.data;
        };

        function error(error) {
            return error.data.message; 
        }
    }
})();
//mark.lawrence
//file.service.js

(function () {

    'use strict';

    var serviceId = 'fileService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.File;

        var service = {
            guest: guest
        }

        return service;

        function guest(id, datafile) {
            return $http.post(url + '/guest/' + id, formDataObject(datafile), {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function (response) {
                return response.data;
            });
        }

        function formDataObject(data) {
            var fd = new FormData();
            fd.append('file', data);
            return fd;
        }
    }
})();
//mark.lawrence
//guest.service.js

(function () {
    'use strict';

    var serviceId = 'guestService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Guest;

        var service = {
            create: create,
            remove: remove,
            get: get,
            getById: getById,
            update: update,
            query: query
        }

        return service;

        function create(event) {
            return $http.post(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        };

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(event) {
            return $http.put(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function _success(response) {
            return response.data;
        };
    }
})();
//template.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'templateService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Template;

        var service = {
            get: get,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(template) {
            return $http.put(url, template)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'userService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.User;

        var service = {
            availableRoles: availableRoles,
            create: create,
            get: get,
            query: query,
            remove: remove,
            update: update
        }

        return service;

        function availableRoles() {
            return $http.get(url + '/roles').then(_success);
        }

        function create(user) {
            return $http.post(url, user).then(_success, function (error) {
                logger.log('error', error);
            });
        }

        function get() {
            return $http.get(url).then(_success);
        }

        function query(searchTerm) {
            var searchUrl = url + '/search/';

            if (searchTerm != undefined && searchTerm.length > 0) {
                searchUrl += '?' + searchTerm;
            };
            return $http.get(searchUrl).then(_success);
        }

        function update(user) {
            return $http.put(url, user).then(_success);
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function _success(response) {
            return response.data;
        }
    }
})();
(function () {
    'use strict'; 

    var controllerId = 'UserController';

    angular.module('app.users').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'userService', 'defaults', 'config'];

    function UserController(logger, service, defaults, config) {
        var vm = this;
        vm.title = 'User Manager';
        vm.subTitle = 'Users';

        vm.description = 'Edit and update users';
        var keyCodes = config.keyCodes;

        vm.availableRoles = [];
        vm.clearCreate = clearCreate;
        vm.currentEdit = {};
        vm.isBusy = false;
        vm.lastDeleted = null;
        vm.lastUpdated = null;
        vm.itemToEdit = {};

        vm.user = {
            //userName: null,
            roles: ['user'],
            fullName: '',
            password: defaults.GENERIC_PASSWORD
        };

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getAvailableRoles();
        };

        vm.addItem = function () {
            vm.user.fullName = parseFullName(vm.user.userName);
            vm.user.email = vm.user.userName + defaults.EMAIL_SUFFIX;
            service.create(vm.user)
                .then(function (data) {
                    //TODO: mapping would allow removal of extend method
                    vm.user = angular.extend(vm.user, data);
                    vm.users.unshift(angular.copy(vm.user));
                    logger.success('User ' + vm.user.userName + ' created!');
                    vm.user.userName = null;
                    //TODO: show error user already exists
                });
        };

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.deleteItem = function (user) {
            angular.copy(user, vm.lastDeleted = {});
            service.remove(user.id)
                .then(function (data) {
                    var idx = vm.users.indexOf(user);
                    vm.users.splice(idx, 1);
                });
        };

        vm.editItem = function (user) {
            vm.currentEdit[user.id] = true;
            angular.copy(user, vm.itemToEdit = {});
        };

        function getAvailableRoles() {
            service.availableRoles()
                .then(function (data) {
                    vm.availableRoles = data;
                });
        };

        vm.saveItem = function (user) {
            vm.isBusy = true;

            vm.currentEdit[user.id] = false;
            angular.copy(user, vm.lastUpdated = {});
            var roles = [];

            _.forEach(vm.itemToEdit.roles,
                function (role) {
                    roles.push(role.name);
                });
            vm.itemToEdit.roles = roles;

            service.update(vm.itemToEdit)
                .then(function (data) {
                    angular.extend(user, data);
                    logger.success('User ' + data.userName + ' updated!');
                    vm.isBusy = false;
                });
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;
            var searchTerm;

            if (typeof (tableState.search.predicateObject) != 'undefined') {
                searchTerm = tableState.search.predicateObject.searchTerm;
            }

            vm.isBusy = true;
            service.query(searchTerm)
                .then(function (data) {
                    vm.users = data;
                    logger.log('users', vm.users);
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        vm.undoDelete = function () {
            var roles = [];

            _.forEach(vm.lastDeleted.roles, function (role) {
                roles.push(role.name);
                logger.log('role', role.name);
            });
            vm.lastDeleted.roles = roles;
            vm.lastDeleted.password = defaults.GENERIC_PASSWORD;

            service.create(vm.lastDeleted).then(function (data) {
                logger.success('Successfully restored ' + data.userName);
                vm.users.unshift(data);
                vm.lastDeleted = null;
            });
        };

        vm.undoChange = function () {
            vm.isBusy = true;

            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.users,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.users[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + data.userName);
                    vm.lastUpdated = null;
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        function clearCreate($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.user.userName = '';
            };
        };

        function parseFullName(name) {
            var arr = name.split('.');
            var fullname = '';

            _.forEach(arr, function (v) {
                fullname += _.capitalize(v) + ' ';
            });

            return _.trim(fullname);
        };
    };
})();
//# sourceMappingURL=data:application/json;base64,
