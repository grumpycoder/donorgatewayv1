//mark.lawrence
//app.module.js

(function () {
    angular.module('app',
    [
        //application modules
        'app.core',
        'app.service',
        'app.filter',

        //feature areas
        'app.nav',
        'app.users',
        'app.events', 
        'app.demographics',
        'app.donortax',
        'app.mailer'
        
    ]);
})();
//core.module.js
//mark.lawrence

(function () {
    angular.module('app.core',
        [
            //angular modules
            'ngMessages',
            'angularLocalStorage',
            'ngRoute',
            'ngAnimate',

            //custom modules
            'blocks.logger',
            'blocks.exception',

            //third party modules
            'smart-table',
            'ui.bootstrap',
            'ngTagsInput',
            'ngFileUpload',
            'rzModule',
            'switcher',
            'gfl.textAvatar',
            'textAngular',
            'ui.bootstrap.datetimepicker',
            'angular-confirm'
        ])
        .constant('toastr', toastr)
        .constant('moment', moment)
        .config(function (stConfig) {
            stConfig.search.delay = 2000;
        });

})();
//config.js
//mark.lawrence
(function () {
    function toastrConfig(toastr) {
        toastr.options.timeOut = 4000;
        toastr.options.positionClass = 'toast-bottom-right';
    };

    var keyCodes = {
        backspace: 8,
        tab: 9,
        enter: 13,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        del: 46
    };

    var apiEndPoints = {
        User: 'users',
        Constituent: 'constituent',
        Tax: 'tax',
        Template: 'template',
        Campaign: 'campaign',
        Mailer: 'mailer',
        Reason: 'reason',
        Event: 'event',
        Guest: 'guest',
        File: 'file', 
        Demographic: 'demographics'
    };

    var config = {
        appErrorPrefix: '[DG Error] ', //Configure the exceptionHandler decorator
        appTitle: 'DonorGateway',
        version: '1.0.0',
        apiUrl: 'http://' + window.location.host + '/api/',
        keyCodes: keyCodes,
        apiEndPoints: apiEndPoints
    };

    var defaults = {
        EMAIL_SUFFIX: '@splcenter.org',
        GENERIC_PASSWORD: '1P@ssword'
    };

    angular.module('app.core')
        .config(toastrConfig)
        .constant('config', config)
        .value('defaults', defaults);
})();
//mark.lawrence
//exception.module.js

(function () {
    angular.module('blocks.exception', ['blocks.logger']);
})();
(function () {
    'use strict';

    angular.module('blocks.logger', []);
})();
//mark.lawrence
//demographics.module.js

(function() {
	
    'use strict';

    angular.module('app.demographics', []);

})();
//mark.lawrence
//donortax.module.js

(function() {
    angular.module('app.donortax', []);
})();
//mark.lawrence
//event.module.js

(function () {
    angular.module('app.events', []);
})();
//filter.module.js
//mark.lawrence

(function () {
    angular.module('app.filter', []);
})();
//mark.lawrence
//mailer.module.js

(function() {
    angular.module('app.mailer', []);
})();
//mark.lawrence
//nav.module.js

(function () {
    angular.module('app.nav', []);
})();
//service.module.js
//mark.lawrence

(function () {
    angular.module('app.service', []);
})();
(function () {
    'use strict';

    angular.module('app.users', []);
})();
//mark.lawrence
//exception-handler.provider.js

// Include in index.html so that app level exceptions are handled.
// Exclude from testRunner.html which should run exactly what it wants to run
(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .provider('exceptionHandler', exceptionHandlerProvider)
        .config(config);

    /**
     * Must configure the exception handling
     * @return {[type]}
     */
    function exceptionHandlerProvider() {
        /* jshint validthis:true */
        this.config = {
            appErrorPrefix: undefined
        };

        this.configure = function (appErrorPrefix) {
            this.config.appErrorPrefix = appErrorPrefix;
        };

        this.$get = function () {
            return { config: this.config };
        };
    };

    /**
     * Configure by setting an optional string value for appErrorPrefix.
     * Accessible via config.appErrorPrefix (via config value).
     * @param  {[type]} $provide
     * @return {[type]}
     * @ngInject
     */
    function config($provide) {
        $provide.decorator('$exceptionHandler', extendExceptionHandler);
    };

    /**
     * Extend the $exceptionHandler service to also display a toast.
     * @param  {Object} $delegate
     * @param  {Object} exceptionHandler
     * @param  {Object} logger
     * @return {Function} the decorated $exceptionHandler service
     */
    function extendExceptionHandler($delegate, exceptionHandler, logger) {
        return function (exception, cause) {
            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';
            var errorData = { exception: exception, cause: cause };
            exception.message = appErrorPrefix + exception.message;
            $delegate(exception, cause);
            /**
             * Could add the error to a service's collection,
             * add errors to $rootScope, log errors to remote web server,
             * or log locally. Or throw hard. It is entirely up to you.
             * throw exception;
             *
             * @example
             *     throw { message: 'error message we added' };
             */
            logger.error(exception.message, errorData);
        };
    };
})();
//mark.lawrence
//exception.js

(function () {
    'use strict';

    angular
        .module('blocks.exception')
        .factory('exception', exception);

    /* @ngInject */
    function exception(logger) {
        var service = {
            catcher: catcher
        };

        return service;

        function catcher(message) {
            return function (reason) {
                logger.error(message, reason);
            };
        };
    };
})();
//mark.lawrence
//logger.js

(function () {
    'use strict';

    angular.module('blocks.logger').factory('logger', logger);

    logger.$inject = ['$log', 'toastr'];

    function logger($log, toastr) {
        var service = {
            showToasts: true,

            error: error,
            info: info,
            success: success,
            warning: warning,

            // straight to console; bypass toastr
            log: $log.log
        };

        return service;
        /////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        }
    };
})();
//mark.lawrence
//demographics.js

(function() {
    'use strict'; 

    var controllerId = 'DemographicsController';

    angular.module('app.demographics').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'demographicService'];

    function UserController(logger, service) {
        var vm = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        vm.title = 'Demographic Updates';
        vm.description = 'Updates made to constituent data'; 
        vm.subTitle = 'Demographics';

        vm.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        vm.demographics = [];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;

            if (tableState !== undefined) {
                if (typeof (tableState.sort.predicate) !== "undefined") {
                    vm.searchModel.orderBy = tableState.sort.predicate;
                    vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
                }
            }

            vm.isBusy = true;
            service.query(vm.searchModel)
                .then(function (data) {
                    vm.demographics = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                    vm.manual = true;
                });
        }
        
        vm.manualSearch = function () {
            logger.log('manual');
            vm.search(tableStateRef);
        }

        vm.paged = function paged(pageNum) {
            vm.search(tableStateRef);
        };

        vm.delete = function(demo) {
            vm.isBusy = true;
            service.remove(demo.id)
                .then(function (data) {
                    logger.success('Deleted ' + demo.name);
                    var idx = vm.demographics.indexOf(demo);
                    vm.demographics.splice(idx, 1);
                }).finally(function() {
                    vm.isBusy = false; 
                });
        }

        vm.deleteAll = function () {
            vm.isBusy = true;
            service.removeAll()
                .then(function (data) {
                    logger.success(data);
                    vm.demographics = []; 
                }).finally(function () {
                    vm.isBusy = false;
                });

        }

        vm.export = function () {
            vm.isBusy = true;
            service.exportList()
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    vm.isBusy = false;
                });
        }
    }

})();
//mark.lawrence
//clear-key.directive.js

(function () {
    angular.module('app').directive("clearKey", function () {
        return {
            restrict: 'EA',
            require: 'ngModel',
            link: function (scope, el, attrs, ctrl) {
                el.on('keydown', function (event) {
                    if (event.which !== 27) { return; } // check key how you want
                    ctrl.$setViewValue(null);
                    ctrl.$render();
                    scope.$apply();
                });
            }
        };
    });
})();
//mark.lawrence
//date-before.directive.js

(function () {
    angular.module('app').directive('dateBefore', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elem, attrs, ngModel) {
                if (!ngModel) return; // do nothing if no ng-model
                debugger;
                var dateBefore = attrs.dateBefore;
                console.log('date', dateBefore);

                // watch own value and re-validate on change
                scope.$watch(attrs.ngModel, function () {
                    validate();
                });

                // observe the other value and re-validate on change
                attrs.$observe('dateGreaterAndEqual', function (val) {
                    validate();
                });

                var validate = function () {
                    // values
                    var dateTo = angular.isDefined(ngModel.$viewValue) === true && !_.isNull(ngModel.$viewValue) ? moment(ngModel.$viewValue).toDate() : null;
                    var dateFrom = attrs.dateGreaterAndEqual !== "" ? moment(attrs.dateGreaterAndEqual.replace('"', '').replace('\\', '').replace('"', '')).toDate() : null;
                    //passing date with braces around it causes and issue therfore we need to use replace

                };
            }
        };
    });


})();
//mark.lawrence
//date-format.directive.js

(function () {
    angular.module('app')
        .directive('dateFormat',
            function (dateFilter, $parse) {
                return {
                    restrict: 'EAC',
                    require: '?ngModel',
                    link: function (scope, element, attrs, ngModel, ctrl) {
                        ngModel.$parsers.push(function (viewValue) {
                            return dateFilter(viewValue, 'MM/dd/yyyy h:mm a');
                        });
                    }
                }
            });
})();
//mark.lawrence
//date-input.directive.js

(function () {
    angular.module('app').directive('dateInput', function ($window) {
        return {
            require: '^ngModel',
            restrict: 'A',
            link: function (scope, elm, attrs, ctrl) {
                var moment = $window.moment;
                var dateFormat = attrs.dateInput;
                attrs.$observe('dateInput', function (newValue) {
                    if (dateFormat === newValue || !ctrl.$modelValue) return;
                    dateFormat = newValue;
                    ctrl.$modelValue = new Date(ctrl.$setViewValue);
                });

                ctrl.$formatters.unshift(function (modelValue) {
                    scope = scope;
                    if (!dateFormat || !modelValue) return "";
                    var retVal = moment(modelValue).format(dateFormat);
                    return retVal;
                });

                ctrl.$parsers.unshift(function (viewValue) {
                    scope = scope;
                    var date = moment(viewValue, dateFormat);
                    return (date && date.isValid() && date.year() > 1950) ? date.toDate() : "";
                });
            }
        };
    });
})();
//mark.lawrence
//smart-table.clearKey.js

(function () {
    angular.module('app').directive("stClearKey", function () {
        return {
            restrict: 'EA',
            require: ['^stTable', '^ngModel'],
            link: function (scope, element, attrs, ctrls) {
                element.on('keydown', function (event) {
                    var ngModel = ctrls[1];
                    var ctrl = ctrls[0];

                    if (event.which === 13) {
                        return ctrl.pipe();
                    }
                    if (event.which === 27) {

                        if (element.context.attributes['st-search'] !== undefined) {
                            return scope.$apply(function () {
                                var fieldName = element.context.attributes['st-search'].value;
                                var tableState = ctrl.tableState();
                                tableState.search.predicateObject[fieldName] = '';
                                return ctrl.pipe();
                            });

                        } else {
                            return scope.$apply(function () {
                                ngModel.$setViewValue(null);
                                ngModel.$render(); // will update the input value as well
                            });

                        }
                    }
                });
            }
        };
    });

    angular.module('app')
        .directive("stResetSearch",
            function () {
                return {
                    restrict: 'EA',
                    require: ['^stTable', '^ngModel'],
                    link: function (scope, element, attrs, ctrls) {
                        return element.bind('click',
                            function () {
                                var model = ctrls[1];
                                var ctrl = ctrls[0];

                                return scope.$apply(function () {
                                    angular.forEach(model.$viewValue,
                                        function (value, key) {
                                            if (key.toLowerCase() === 'page') {
                                                model.$viewValue[key] = 1;
                                            }
                                            if (Array.isArray(value) || _.includes(key.toLowerCase(), 'page')) return;
                                            model.$viewValue[key] = null;
                                        });
                                    var tableState = ctrl.tableState();
                                    tableState.search.predicateObject = {};
                                    tableState.pagination.start = 0;
                                    return ctrl.pipe();
                                });
                            });
                    }
                };
            });

    angular.module('app').directive('stSubmitSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
        return {
            require: '^stTable',
            link: function (scope, element, attr, ctrl) {
                return element.bind('click',
                    function () {
                        var tableCtrl = ctrl;
                        tableCtrl.pipe();
                    });

            }
        };
    }]);


    angular.module('smart-table')
      .directive('stSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
          return {
              require: '^stTable',
              link: function (scope, element, attr, ctrl) {
                  var tableCtrl = ctrl;
                  var promise = null;
                  var throttle = attr.stDelay || stConfig.search.delay;
                  var event = attr.stInputEvent || stConfig.search.inputEvent;

                  attr.$observe('stSearch', function (newValue, oldValue) {
                      var input = element[0].value;
                      if (newValue !== oldValue && input) {
                          ctrl.tableState().search = {};
                          tableCtrl.search(input, newValue);
                      }
                  });

                  //table state -> view
                  scope.$watch(function () {
                      return ctrl.tableState().search;
                  }, function (newValue, oldValue) {
                      var predicateExpression = attr.stSearch || '$';
                      if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {
                          element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';
                      }
                  }, true);

                  // view -> table state
                  element.bind(event, function (evt) {
                      evt = evt.originalEvent || evt;
                      if (promise !== null) {
                          $timeout.cancel(promise);
                      }

                      promise = $timeout(function () {
                          tableCtrl.search(evt.target.value, attr.stSearch || '');
                          promise = null;
                      }, throttle);
                  });
              }
          };
      }]);

})();
(function() {


    var app = angular.module('app');

    app.directive('toggleCheckbox', function($timeout) {

        /**
     * Directive
     */
        return {
            restrict: 'A',
            transclude: true,
            replace: false,
            require: 'ngModel',
            link: function($scope, $element, $attr, ngModel) {

                // update model from Element
                var updateModelFromElement = function() {
                    // If modified
                    var checked = $element.prop('checked');
                    if (checked !== ngModel.$viewValue) {
                        // Update ngModel
                        ngModel.$setViewValue(checked);
                        $scope.$apply();
                    }
                };

                // Update input from Model
                var updateElementFromModel = function(newValue) {
                    $element.trigger('change');
                };

                // Observe: Element changes affect Model
                $element.on('change', function() {
                    updateModelFromElement();
                });

                $scope.$watch(function() {
                    return ngModel.$viewValue;
                }, function(newValue) {
                    updateElementFromModel(newValue);
                }, true);

                // Initialise BootstrapToggle
                $element.bootstrapToggle();
            }
        };
    });
})();
//mark.lawrence
//donortax.controller.js

(function() {
    'use strict';

    var controllerId = 'DonorTaxController';

    angular.module('app.donortax').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModal', 'constituentService'];

    function mainController(logger, $modal, service) {
        var vm = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        vm.title = 'Donor Tax Manager';
        vm.subTitle = 'Constituents';

        vm.people = [];
        vm.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };
        
        activate();

        function activate() {
            logger.log(controllerId + ' activated');
        }

        vm.search = function (tableState) {
            tableStateRef = tableState;

            if (!vm.searchModel.isPriority) vm.searchModel.isPriority = null;

            if (tableState !== undefined) {
                if (typeof (tableState.sort.predicate) !== "undefined") {
                    vm.searchModel.orderBy = tableState.sort.predicate;
                    vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
                }
            }

            vm.isBusy = true;
            service.query(vm.searchModel)
                .then(function (data) {
                    vm.people = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        }

        vm.paged = function paged(pageNum) {
            vm.search(tableStateRef);
        };

        vm.edit = function (person) {
            $modal.open({
                templateUrl: '/app/donortax/views/edit-constituent.html',
                controller: 'EditConstituentController',
                controllerAs: 'vm', 
                resolve: {
                    person: person
                }
            }).result.then(function (person) {
                logger.success('Successfully updated ' + person.name);
            });
        }

        vm.viewTaxes = function (person) {

            $modal.open({
                templateUrl: '/app/donortax/views/taxitems.html',
                controller: 'TaxItemsController',
                controllerAs: 'vm',
                resolve: {
                    person: person
                }
            }).result.then(function (person) {
                logger.success('Successfully updated ' + person.name);
            });
        }
    }

})();
//mark.lawrence
//editConstituent.controller.js

(function () {
    'use strict';

    var controllerId = 'EditConstituentController';

    angular.module('app.donortax').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'constituentService', 'person'];

    function mainController($scope, logger, $modal, service, person) {
        var vm = this;
        vm.title = 'Edit Person';
        vm.person = person;

        vm.cancel = function () {
            logger.log('cancel');
            $modal.dismiss();
        }

        vm.save = function () {
            service.save(person)
                .then(function (data) {
                    angular.extend(vm.person, data);
                    $modal.close(vm.person);
                });
        }
    }

})();
//mark.lawrence
//taxItems.controller.js

(function () {
    'use strict';

    var controllerId = 'TaxItemsController';

    angular.module('app.donortax').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'constituentService', 'person'];

    function mainController($scope, logger, $modal, service, constituent) {
        var vm = this;
        var currentYear = parseInt(moment().get('Year'));

        vm.selectedYear = currentYear - 1;
        vm.dateOptions = {
            formatYear: 'yyyy',
            maxDate: new Date('12/30/' + vm.selectedYear),
            minDate: new Date('1/1/' + vm.selectedYear),
            startingDay: 1
        };
        vm.altInputFormats = ['M!/d!/yyyy'];
        vm.years = [];

        vm.yearChanged = yearChanged;

        vm.constituent = constituent;
        vm.itemToEdit = {};
        vm.newItem = {};
        vm.taxItems = constituent.taxItems;
        activate();

        function activate() {
            getYears();
        }


        vm.addItem = function() {
            vm.newItem.constituentId = constituent.id;
            vm.newItem.taxYear = moment(vm.newItem.donationDate).year();

            service.addTax(vm.newItem)
                .then(function (data) {
                    vm.taxItems.push(data);
                    vm.newItem = {};
                    logger.success('Added tax item');
                });
        }

        vm.cancelEdit = function() {
            vm.currentEdit = {};
        }

        vm.deleteItem = function(item) {
            var idx = vm.taxItems.indexOf(item);
            service.removeTax(item.id)
                .then(function (data) {
                    vm.taxItems.splice(idx, 1);
                    logger.warning('deleted ' + item.donationDate);
                });
        }

        vm.editItem = function(item) {
            vm.currentEdit = {};
            vm.currentEdit[item.id] = true;
            vm.itemToEdit = angular.copy(item);
            vm.itemToEdit.donationDate = moment(vm.itemToEdit.donationDate).toDate();
        }

        vm.saveItem = function(item) {
            service.updateTax(vm.itemToEdit)
                .then(function (response) {
                    angular.extend(item, vm.itemToEdit);
                    vm.currentEdit = {};
                    logger.success('Updated tax item ' + moment(item.donationDate).format('MM/dd/yyyy'));
                });
        }

        function yearChanged() {
            vm.dateOptions = {
                maxDate: new Date('12/30/' + vm.selectedYear),
                minDate: new Date('1/1/' + vm.selectedYear)
            };
            vm.newItem.donationDate = vm.dateOptions.minDate;
        }

        function getYears() {
            for (var i = 0; i < 5; i++) {
                vm.years.push(currentYear - i);
            }
            vm.yearChanged();
        }

        vm.cancel = function () {
            $modal.dismiss();
        }

    }

})();
//mark.lawrence
//env.js

(function (window) {
    window.__env = window.__env || {};

    switch (window.location.hostname) {
        case 'dg-test':
            window.__env.rsvpUrl = 'rsvp-test';
            break;
        case 'donorgateway.splcenter.org':
            window.__env.rsvpUrl = 'rsvp.splcenter.org';
            break;
        case 'dg':
            window.__env.rsvpUrl = 'rsvp.splcenter.org';
            break;
        case 'donorgateway':
            window.__env.rsvpUrl = 'rsvp.splcenter.org';
            break;
        default:
            window.__env.rsvpUrl = 'localhost:54505';
    }

    // API url
    window.__env.apiUrl = 'http://' + window.location.host + '/api';

    // Base url
    window.__env.baseUrl = '/';

    // Whether or not to enable debug mode
    // Setting this to false will disable console output
    window.__env.enableDebug = true;
}(this));
//mark.lawrence
//createEvent.controller.js

(function() {
	
    'use strict';

    var controllerId = 'CreateEventController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModalInstance', 'eventService'];

    function mainController(logger, $modal, service) {
        var vm = this;
        vm.title = 'Create Event';
        
        vm.dateFormat = "MM/DD/YYYY hh:mm";

        vm.event = {
            startDate: new Date(),
            capacity: 1,
            template: {}
        };

        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.save = function () {
            vm.isSaving = true; 
            vm.event.template.name = vm.event.name;
            service.create(vm.event)
                .then(function (data) {
                    $modal.close(data);
                });
        }
    }

})();
//mark.lawrence
//editGuest.controller.js

(function () {
    'use strict';

    var controllerId = 'CreateGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'eventService', 'event'];

    function mainController($scope, logger, $modal, service, event) {
        var vm = this;
        vm.title = 'Create Guest';

        vm.guest = {
            finderNumber: '00000000000',
            eventId: event.id
        };

        vm.ticketCountList = [];
        for (var i = 1; i < event.ticketAllowance + 1; i++) {
            vm.ticketCountList.push(i);
        }

        vm.decrementTickets = function () {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets--;
        }

        vm.incrementTickets = function (e) {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets++;
        }

        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.changeAttending = function () {
            if (vm.guest.isAttending) {
                vm.guest.ticketCount = 1;
            } else {
                vm.guest.ticketCount = null;
            }
        }

        vm.save = function () {
            vm.guest.insideSalutation = vm.guest.name;
            vm.guest.outsideSalutation = vm.guest.name;
            vm.guest.emailSalutation = vm.guest.name;
            vm.guest.eventId = event.id;
            service.registerGuest(vm.guest)
                            .then(function (data) {
                                angular.extend(vm.guest, data);
                                $modal.close(vm.guest);
                            }).finally(function () {
                            });
        }
    }


})();
//mark.lawrence
//editGuest.controller.js

(function () {
    'use strict';

    var controllerId = 'EditGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModalInstance', 'eventService', 'guest'];

    function mainController($scope, logger, $modal, service, guest) {
        var vm = this;
        vm.title = 'Edit Guest';

        if (guest.isAttending) {
            vm.showAddTicket = true;
            guest.additionalTickets = 0;
        }

        vm.guest = angular.copy(guest);
        logger.log('guest', guest);
        logger.log('vm.guest', vm.guest);

        vm.ticketCountList = [];
        for (var i = 1; i < guest.event.ticketAllowance + 1; i++) {
            vm.ticketCountList.push(i);
        }
        
        vm.decrementTickets = function () {
            $scope.editGuestForm.$pristine = false;
            vm.guest.additionalTickets--;
        }

        vm.incrementTickets = function (e) {
            $scope.editGuestForm.$pristine = false; 
            vm.guest.additionalTickets++;
        }
        
        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.changeAttending = function () {
            if (vm.guest.isAttending) {
                vm.guest.ticketCount = 1;
            } else {
                vm.guest.ticketCount = null;
            }
        }

        vm.save = function () {

            if (vm.showAddTicket) {
                service.addTicket(vm.guest)
                    .then(function (data) {
                        angular.extend(vm.guest, data);
                        $modal.close(vm.guest);
                    });
            } else {
                service.registerGuest(vm.guest)
                    .then(function(data) {
                        angular.extend(vm.guest, data);
                        $modal.close(vm.guest);
                    });
            }
        }
    }


})();
//mark.lawrence
//events.js

(function () {
    'use strict';

    var controllerId = 'EventController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['$scope', 'logger', '$uibModal', 'eventService', 'guestService', 'templateService'];

    function mainController($scope, logger, $modal, service, guestService, templateService) {
        var vm = this;
        vm.title = 'Event Manager';
        var tableStateRef;
        var pageSizeDefault = 10;

        var choices = [
            { id: 1, name: "Register", command: function (e) { vm.registerGuest(e) }, icon: 'icon ion-key', default: true },
            { id: 2, name: "Mail Ticket", command: function (e) { vm.mailTicket(e) }, icon: 'icon ion-android-mail', default: false },
            { id: 3, name: "Cancel", command: function (e) { vm.cancelGuest(e) }, icon: 'icon ion-android-cancel', default: false },
            { id: 4, name: "Guest List", command: function (e) { vm.addToMailQueue(e) }, icon: 'icon ion-android-add-circle', default: false },
            { id: 5, name: "Add Tickets", command: function (e) { vm.registerGuest(e) }, icon: 'icon ion-android-add-circle', default: false }
        ];

        vm.hostLocation = window.__env.rsvpUrl + '/';

        vm.title = 'Event Manager';
        vm.description = "Manage Donor Events";
        vm.currentDate = new Date();

        vm.dateOptions = {
            dateDisabled: false,
            formatYear: 'yy',
            maxDate: new Date(2020, 5, 22),
            minDate: new Date(),
            startingDay: 1
        };

        vm.dateFormat = "MM/DD/YYYY h:mm a";
        vm.events = [];

        vm.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc'
        };

        vm.tabs = [
            { title: 'Details', template: 'app/events/views/home.html', active: false, icon: 'fa-info-circle' },
            { title: 'Guests', template: 'app/events/views/guest-list.html', active: true, icon: 'fa-users' },
            //{ title: 'Mail Queue', template: 'app/events/views/mail-queue.html', active: false, icon: '' },
            //{ title: 'Waiting Queue', template: 'app/events/views/wait-queue.html', active: false, icon: '' },
            { title: 'Template', template: 'app/events/views/template.html', active: false, icon: 'fa-file-text' }
        ];

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getEvents().then(function () {
                logger.log('loaded events');
            });
        }

        vm.addToMailQueue = function (guest) {
            vm.isBusy = true;
            service.addToMail(guest)
                .then(function (data) {
                    logger.info('Moved Guest ' + data.name + 'Send Ticket: ');
                    angular.extend(guest, data);
                    BuildGuestOptions(guest);
                    var event = angular.copy(vm.selectedEvent);
                    angular.extend(vm.selectedEvent, guest.event);
                    vm.selectedEvent.guests = event.guests;
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.cancelGuest = function (guest) {
            service.cancelGuest(guest)
                .then(function (result) {
                    logger.log('result', result);
                    angular.extend(guest, result);
                    //BUG: Not changin options
                    BuildGuestOptions(guest);
                    var event = angular.copy(vm.selectedEvent);
                    angular.extend(vm.selectedEvent, result.event);
                    vm.selectedEvent.guests = event.guests;
                });
        }

        vm.changeEvent = function () {
            if (!vm.selectedEvent) return;
            //RESET VALUES
            vm.searchModel = {
                page: 1,
                pageSize: pageSizeDefault,
                orderBy: 'id',
                orderDirection: 'asc'
            };
            vm.showWaitList = false;
            vm.showMailQueue = false;
            vm.tabs[0].active = true;

            vm.isBusy = true;
            service.getById(vm.selectedEvent.id)
                .then(function (data) {
                    angular.extend(vm.selectedEvent, data);
                }).finally(function () {
                    vm.isBusy = false;
                    vm.searchGuests(tableStateRef);
                });

        }

        vm.refreshGuests = function () {
            vm.searchGuests(tableStateRef);
        }

        vm.deleteEvent = function (id) {
            vm.isBusy = true;
            service.remove(id)
                .then(function () {
                    logger.success('Deleted event');
                }).finally(function () {
                    vm.selectedEvent = undefined;
                    vm.isBusy = false;
                    getEvents();
                });
        }

        vm.exportGuests = function () {
            vm.isBusy = true;
            service.downloadGuests(vm.selectedEvent.id, vm.searchModel)
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.createGuest = function () {

            $modal.open({
                templateUrl: '/app/events/views/edit-guest.html',
                controller: 'CreateGuestController',
                controllerAs: 'vm',
                resolve: {
                    event: vm.selectedEvent
                }
            }).result.then(function (result) {
                var guest = result;
                BuildGuestOptions(guest);
                var event = angular.copy(vm.selectedEvent);
                angular.extend(vm.selectedEvent, result.event);
                vm.selectedEvent.guests = event.guests;
                vm.selectedEvent.guests.unshift(guest);
            });
        }

        vm.registerGuest = function (guest) {
            guest.event = angular.copy(vm.selectedEvent);
            $modal.open({
                templateUrl: '/app/events/views/edit-guest.html',
                controller: 'EditGuestController',
                controllerAs: 'vm',
                resolve: {
                    guest: guest
                }
            }).result.then(function (result) {
                angular.extend(guest, result);
                BuildGuestOptions(guest);

                var event = angular.copy(vm.selectedEvent);
                angular.extend(vm.selectedEvent, result.event);
                vm.selectedEvent.guests = event.guests;
                guest = null;
            });
        }

        vm.toggleWaiting = function () {
            vm.showWaiting = !vm.showWaiting;
            vm.showMail = false;
            vm.showSent = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.toggleMail = function () {
            vm.showMail = !vm.showMail;
            vm.showWaiting = false;
            vm.showSent = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.toggleSent = function () {
            vm.showSent = !vm.showSent;
            vm.showWaiting = false;
            vm.showMail = false;
            vm.searchModel.page = 1;
            vm.searchGuests(tableStateRef);
        }

        vm.mailAllTickets = function () {
            vm.isBusy = true;
            service.mailAllTickets(vm.selectedEvent.id)
                .then(function (data) {
                    angular.extend(vm.selectedEvent, data);
                    vm.searchGuests(tableStateRef);
                    vm.isBusy = false;
                });
        }

        vm.mailTicket = function (guest) {
            vm.isBusy = true;
            service.mailTicket(guest)
                        .then(function (data) {
                            angular.extend(guest, data);
                            BuildGuestOptions(guest);

                            var event = angular.copy(vm.selectedEvent);
                            angular.extend(vm.selectedEvent, guest.event);
                            vm.selectedEvent.guests = event.guests;
                            logger.success('Mailed ticket to: ' + guest.name);

                        }).finally(function () {
                            vm.isBusy = false;
                        });
        }

        vm.searchGuests = function (tableState) {
            tableStateRef = tableState;
            if (!vm.selectedEvent) return false;

            if (tableState !== undefined) {
                if (typeof (tableState.sort.predicate) !== "undefined") {
                    vm.searchModel.orderBy = tableState.sort.predicate;
                    vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
                }
            }

            vm.searchModel.isAttending = null;
            vm.searchModel.isWaiting = null;
            vm.searchModel.isMailed = null;

            if (vm.showWaiting) {
                vm.searchModel.isWaiting = vm.showWaiting ? vm.showWaiting : null;
            }

            if (vm.showMail) {
                vm.searchModel.isWaiting = false;
                vm.searchModel.isMailed = false;
                vm.searchModel.isAttending = true;
            }

            if (vm.showSent) {
                vm.searchModel.isWaiting = false;
                vm.searchModel.isMailed = true;
                vm.searchModel.isAttending = true;
            }

            vm.isBusy = true;
            return service.getGuests(vm.selectedEvent.id, vm.searchModel)
                .then(function (data) {
                    var guests = data.items.map(function (guest) {
                        BuildGuestOptions(guest);
                        return guest;
                    });
                    vm.selectedEvent.guests = guests;
                   
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        }

        vm.paged = function paged() {
            vm.searchGuests(tableStateRef);
        };

        vm.saveEvent = function (form) {
            vm.isBusy = true;
            return service.update(vm.selectedEvent)
                .then(function (data) {
                    var guests = vm.selectedEvent.guests;
                    angular.extend(vm.selectedEvent, data);

                    vm.selectedEvent.guests = guests;
                    logger.success('Saved Event: ' + data.name);
                })
                .finally(function () {
                    form.$setPristine();
                    vm.isBusy = false;
                });
        }

        vm.fileSelected = function ($files, $file) {
            var file = $file;

            var src = '';
            var reader = new FileReader();

            reader.onloadstart = function () {
                vm.isBusy = true;
            }

            reader.onload = function (e) {
                src = reader.result;
                vm.selectedEvent.template.image = reader.result;
                vm.selectedEvent.template.mimeType = file.type;
            }
            reader.onerror = function (e) {
                logger.log(e);
            }

            reader.onloadend = function (e) {
                vm.isBusy = false;
                //Added due to large images not complete before digest cycle. 
                $scope.$apply();
            };

            reader.readAsDataURL(file);
        };

        vm.saveTemplate = function () {
            vm.isBusy = true;
            templateService.update(vm.selectedEvent.template)
                .then(function (data) {
                    vm.selectedEvent.template = angular.extend(vm.selectedEvent.template, data);
                    logger.success('Saved template: ' + data.name);
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.toggleCancel = function (form) {
            vm.selectedEvent.isCancelled = !vm.selectedEvent.isCancelled;
            vm.saveEvent(form).then(function () {
                if (vm.selectedEvent.isCancelled) {
                    logger.warning('Cancelled event');
                } else {
                    logger.info('Restored event');
                }
            });
        }

        vm.showCreateEvent = function () {
            $modal.open({
                templateUrl: '/app/events/views/create-event.html',
                controller: 'CreateEventController',
                controllerAs: 'vm'
            }).result.then(function (data) {
                vm.selectedEvent = data;
                vm.events.unshift(vm.selectedEvent);
                logger.success('Successfully created ' + data.name);
            });
        }

        vm.showGuestUpload = function () {
            $modal.open({
                keyboard: false,
                backdrop: 'static',
                templateUrl: '/app/events/views/guest-upload.html',
                //controller: ['logger', '$uibModalInstance', 'fileService', 'selectedEvent', UploadGuestController],
                controller: 'UploadGuestController',
                controllerAs: 'vm',
                resolve: {
                    event: vm.selectedEvent
                }
            }).result.then(function (result) {
                if (result.success) {
                    logger.success(result.message);
                } else {
                    logger.error(result.message);
                }
                vm.changeEvent();
            });
        }

        function getEvents() {
            vm.isBusy = true;
            return service.get()
                .then(function (data) {
                    vm.events = data;
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        function BuildGuestOptions(guest) {
            var options = [];

            if (guest.isAttending === null || guest.isAttending === false) options.push(choices[0]); 
            if (guest.isAttending && !guest.isWaiting && !guest.isMailed) {
                options.push(choices[1]);
            }
            if (guest.isWaiting) {
                options.push(choices[3]);
            }
            if (guest.isAttending) {
                options.push(choices[4]);
            }
            if (guest.isAttending === true) options.push(choices[2]);

            guest.primaryChoice = angular.copy(options[0]);
            options.shift();

            angular.extend(guest, { choices: options });
        }

    };

})();
//mark.lawrence
//uploadGuest.controller.js

(function() {
	
    'use strict';

    var controllerId = 'UploadGuestController';

    angular.module('app.events').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModalInstance', 'fileService', 'event'];

    function mainController(logger, $modal, service, event) {
        var vm = this;
        vm.title = 'Upload Guest List';

        vm.event = event;

        vm.cancel = function () {
            vm.file = undefined;
            $modal.dismiss();
        }

        vm.fileSelected = function ($file, $event) {
            vm.result = null;
        };
        
        vm.save = function () {
            vm.isBusy = true;
            vm.result = {
                success: false
            }

            service.guest(vm.event.id, vm.file)
                    .then(function (data) {
                        vm.result.success = true;
                        vm.result.message = data;
                    }).catch(function (error) {
                        vm.result.message = error.data.message;
                    }).finally(function () {
                        vm.file = undefined;
                        vm.isBusy = false;
                        $modal.close(vm.result);
                    });
        }
    }

})();
//app.filter.js
//mark.lawrence

angular.module('app.filter').filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);

angular.module('app.filter', []).filter('checkmark', function () {
    return function (input) {
        return input ? '\u2713' : '\u2718';
    };
});

angular.module('app.filter').filter('yesNo', function () {
    return function (input) {
        return input ? 'Yes' : 'No';
    }
});

angular.module('app.filter').filter('updateStatus', function () {
    return function (input) {
        if (input === 1) {
            return 'Unchanged';
        }
        if (input === 2) {
            return 'Changed';
        }
        if (input === 6) {
            return 'Reconciled';
        }
        return "";
    };
});
//mark.lawrence
//mailer.controller.js

(function () {
    'use strict';

    var controllerId = 'MailerController';

    angular.module('app.mailer').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModal', 'mailerService'];

    function mainController(logger, $modal, service) {
        var vm = this;
        var tableStateRef;
        var pageSizeDefault = 10;

        vm.title = 'MarkIt Manager';
        vm.subTitle = 'Mailers';

        vm.campaigns = [];
        vm.reasons = [];

        vm.mailers = [];
        vm.searchModel = {
            page: 1,
            pageSize: pageSizeDefault,
            orderBy: 'id',
            orderDirection: 'asc',
            suppress: false
        };

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            service.campaigns()
                .then(function (data) {
                    vm.campaigns = data;
                });

            service.reasons()
                .then(function (data) {
                    vm.reasons = data;
                });

            
        }

        vm.download = function () {
            vm.isBusy = true;
            service.download(vm.searchModel)
                .then(function (data) {
                    var contentType = data.headers()['content-type'];
                    var filename = data.headers()['x-filename'];

                    var linkElement = document.createElement('a');
                    try {
                        var blob = new Blob([data.data], { type: contentType });
                        var url = window.URL.createObjectURL(blob);

                        linkElement.setAttribute('href', url);
                        linkElement.setAttribute("download", filename);

                        var clickEvent = new MouseEvent("click", {
                            "view": window,
                            "bubbles": true,
                            "cancelable": false
                        });
                        linkElement.dispatchEvent(clickEvent);
                    } catch (ex) {
                        logger.log(ex);
                    }
                }).finally(function () {
                    vm.isBusy = false;
                });
        }

        vm.search = function (tableState) {
            tableStateRef = tableState;

            if (typeof (tableState.sort.predicate) !== "undefined") {
                vm.searchModel.orderBy = tableState.sort.predicate;
                vm.searchModel.orderDirection = tableState.sort.reverse ? 'desc' : 'asc';
            }

            if (vm.searchModel.suppress === null) vm.searchModel.suppress = false; 

            vm.isBusy = true;

            service.query(vm.searchModel)
                .then(function (data) {
                    vm.mailers = data.items;
                    vm.searchModel = data;
                    vm.isBusy = false;
                });
        }

        vm.showUpload = function () {
            $modal.open({
                keyboard: false,
                backdrop: 'static',
                templateUrl: '/app/mailer/views/mailer-upload.html',
                controller: 'UploadMailerController',
                controllerAs: 'vm',
                resolve: {
                    campaigns: function() { return vm.campaigns; }
                }
            })
            .result.then(function (result) {
                vm.campaigns = angular.extend(result.campaigns);

                if (result.success) {
                    logger.success(result.message);
                } else {
                    logger.error(result.message);
                }

            });
        }

        vm.paged = function paged(pageNum) {
            vm.search(tableStateRef);
        };

        vm.refresh = function () {
            service.campaigns()
               .then(function (data) {
                   vm.campaigns = data;
               });

            vm.search(tableStateRef);
        }

        vm.toggleFilter = function () {
            vm.showSuppress = !vm.showSuppress;
            vm.searchModel.suppress = vm.showSuppress;

            vm.searchModel.page = 1;
            vm.search(tableStateRef);
        }

        vm.toggleSuppress = function (mailer) {
            if (mailer.suppress) {
                mailer.suppress = false;
                mailer.reasonId = null;
                service.save(mailer)
                    .then(function(data) {
                        angular.extend(mailer, data);
                    });
            } else {
                $modal.open({
                        templateUrl: '/app/mailer/views/mailer-suppress.html',
                        controller: 'SuppressMailerController',
                        controllerAs: 'vm',
                        resolve: {
                            mailer: mailer,
                            reasons: function() { return vm.reasons }
                        }
                    })
                    .result.then(function(result) {
                        angular.extend(mailer, result);
                    });
            }

        }
    }

  

})();
//mark.lawrence
//suppressMailer.controller.js

(function () {

    'use strict';

    var controllerId = 'SuppressMailerController';

    angular.module('app.mailer').controller(controllerId, mainController);

    mainController.$inject = ['logger', '$uibModalInstance', 'mailerService', 'mailer', 'reasons'];

    function mainController(logger, $modal, service, mailer, reasons) {
        var vm = this;
        vm.title = 'Mailer Suppress';
        vm.mailer = mailer;

        vm.reasons = reasons;

        vm.mailer.reasonId = vm.reasons[0].id;

        vm.cancel = function () {
            $modal.dismiss();
        }

        vm.cancel = function() {
            $modal.dismiss();
        }

        vm.save = function () {
            vm.mailer.suppress = true;
            service.save(vm.mailer).then(function (data) {
                angular.extend(mailer, data);
            });
            $modal.close(vm.mailer);
        }

    }

})();
//mark.lawrence
//uploadMailer.controller.js

(function () {

    'use strict';

    var controllerId = 'UploadMailerController';

    angular.module('app.mailer').controller(controllerId, mainController);

    //mainController.$inject = ['logger', '$uibModalInstance', 'fileService', 'campaigns'];
    mainController.$inject = ['logger', '$uibModalInstance', 'fileService', 'mailerService', 'campaigns'];

    function mainController(logger, $modal, service, mailerService, campaigns) {
        var vm = this;
        vm.title = 'Mailer Upload';

        vm.createNew = false;

        vm.campaigns = campaigns;

        vm.campaign = {

        };

        vm.cancel = function () {
            vm.file = undefined;
            $modal.dismiss();
        }

        vm.fileSelected = function ($file, $event) {
            vm.result = null;
        };

        vm.save = function () {
            vm.isBusy = true;
            vm.result = {
                success: false
            }

            service.mailer(vm.selectedCampaign.id, vm.file)
                .then(function (data) {
                    vm.result.success = true;
                    vm.result.message = data;
                })
                .catch(function (error) {
                    vm.result.message = error.data.message;
                })
                .finally(function () {
                    vm.file = undefined;
                    vm.isBusy = false;
                    vm.result.campaigns = vm.campaigns; 
                    $modal.close(vm.result);
                });
        }

        vm.createCampaign = function () {
            mailerService.createCampaign(vm.campaign)
                .then(function (data) {
                    vm.campaigns.unshift(data);
                    vm.selectedCampaign = data;
                    vm.createNew = false;
                });
        }
    }

})();
//mark.lawrence
//nav.js

(function () {
    'use strict';

    var controllerId = 'NavController';

    angular.module('app.nav').controller(controllerId, mainController);

    mainController.$inject = ['logger'];

    function mainController(logger) {
        var vm = this;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            vm.user = JSON.parse(localStorage.getItem('currentUser'));
        }
    };
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'constituentService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Constituent;

        var service = {
            get: get,
            query: query, 
            save: save, 
            addTax: addTax, 
            updateTax: updateTax, 
            removeTax: removeTax
        }

        return service;


        function get() {
            return $http.get(url).then(_success).catch(error);
        }

        function query(vm) {
            return $http.post(url + '/search', vm)
              .then(function (response) {
                  return response.data;
              });
        }

        function save(person) {
            return $http.put(url, person)
              .then(function (response) {
                  return response.data;
              });
        }

        function addTax(taxItem) {
            return $http.post(url + '/' + taxItem.constituentId + '/taxitem', taxItem)
           .then(function (response) {
               return response.data;
           });
        }

        function updateTax(taxItem) {
            return $http.put(url + '/' + taxItem.constituentId + '/taxitem', taxItem)
           .then(function (response) {
               return response.data;
           });
        }

        function removeTax(id) {
            return $http.delete(url + '/deletetax/' + id)
           .then(function (response) {
               return response.data;
           });
        }

        function _success(response) {
            return response.data;
        }

        function error(error) {
            return error.data.message;
        }
    }
})();
//template.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'demographicService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Demographic;

        var service = {
            get: get,
            remove: remove,
            removeAll: removeAll,
            query: query,
            exportList: exportList
        }

        return service;

        function get(page, size) {
            return $http.get(url + '?page=' + page + '&pagesize=' + size)
                .then(function (response) {
                    return response.data;
                });
        }

         function query(vm) {
            return $http.post(url + '/search', vm)
              .then(function (response) {
                  return response.data;
              });
        }
        
         function remove(id) {
            return $http.delete(url + '/' + id).then(_success).catch(error);
        }

        function removeAll() {
            return $http.delete(url).then(_success).catch(error);
        }

        function _success(response) {
            return response.data;
        };

        function error(error) {
            return error.data.message;
        }

        function exportList() {
            return $http.post(url + '/export')
              .then(function (data) {
                  return data;
              }).catch(error);
        }
    }
})();
//mark.lawrence
//event.service.js

(function () {
    'use strict';

    var serviceId = 'eventService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Event;
        var service = {
            cancelGuest: cancelGuest, 
            create: create,
            downloadGuests: downloadGuests, 
            remove: remove,
            get: get,
            getById: getById,
            getGuests: getGuests, 
            query: query,
            update: update,
            addToMail: addToMail, 
            registerGuest: registerGuest,
            mailTicket: mailTicket,
            mailAllTickets: mailAllTickets,
            addTicket: addTicket
        }
        return service;

        function cancelGuest(guest) {
            return $http.post(url + '/' + guest.eventId + '/CancelRegistration', guest).then(_success).catch(error);
        }

        function create(event) {
            return $http.post(url, event)
                .then(_success).catch(error);
        }

        function downloadGuests(id, vm) {
            return $http.post(url + '/' + id + '/guests/export', vm)
                .then(function(data) {
                    return data;
                }).catch(error);
        }


        function remove(id) {
            return $http.delete(url + '/' + id).then(_success).catch(error);
        }

        function get() {
            return $http.get(url)
                .then(_success).catch(error);
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(_success).catch(error);
        }

        function getGuests(id, vm) {
            return $http.post(url + '/' + id + '/guests', vm)
                .then(_success).catch(error);
        }

        function mailAllTickets(eventId) {
            return $http.put(url + '/' + eventId + '/mailalltickets').then(_success).catch(error);
        }

        function mailTicket(guest) {
            return $http.post(url + '/' + guest.eventId + '/mailticket', guest).then(_success).catch(error);
        }
        
        function addTicket(guest) {
            return $http.post(url + '/' + guest.eventId + '/addticket', guest).then(_success).catch(error);
        }

        function addToMail(guest) {
            return $http.post(url + '/' + guest.eventId + '/addtomail', guest).then(_success).catch(error);
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(_success).catch(error);
        }

        function registerGuest(guest) {
            return $http.post(url + '/' + guest.eventId + '/registerguest' , guest).then(_success).catch(error);
        }

        function update(event) {
            return $http.put(url, event)
                .then(_success).catch(error);
        }

        function _success(response) {
            return response.data;
        }

        function error(error) {
            return error.data.message; 
        }
    }
})();
//mark.lawrence
//file.service.js

(function () {

    'use strict';

    var serviceId = 'fileService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.File;

        var service = {
            guest: guest, 
            mailer: mailer
        }

        return service;

        function guest(id, datafile) {
            return $http.post(url + '/guest/' + id, formDataObject(datafile), {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function (response) {
                return response.data;
            });
        }

        function mailer(id, datafile) {
            return $http.post(url + '/mailer/' + id, formDataObject(datafile), {
                transformRequest: angular.identity,
                headers: { 'Content-Type': undefined }
            }).then(function (response) {
                return response.data;
            });
        }

        function formDataObject(data) {
            var fd = new FormData();
            fd.append('file', data);
            return fd;
        }
    }
})();
//mark.lawrence
//guest.service.js

(function () {
    'use strict';

    var serviceId = 'guestService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Guest;

        var service = {
            create: create,
            remove: remove,
            get: get,
            getById: getById,
            update: update,
            query: query
        }

        return service;

        function create(event) {
            return $http.post(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function getById(id) {
            return $http.get(url + '/' + id)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(event) {
            return $http.put(url, event)
                .then(function (response) {
                    return response.data;
                });
        }

        function _success(response) {
            return response.data;
        }
    }
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'mailerService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Mailer;

        var service = {
            get: get,
            query: query,
            download: download, 
            campaigns: campaigns, 
            reasons: reasons, 
            save: save, 
            createCampaign: createCampaign
        }

        return service;


        function get() {
            return $http.get(url).then(_success).catch(error);
        }

        function query(vm) {
            return $http.post(url + '/search', vm)
              .then(function (response) {
                  return response.data;
              });
        }

        function download(vm) {
            return $http.post(url + '/export', vm)
            .then(function (data) {
                return data;
            }).catch(error);
        }

        function campaigns() {
            return $http.get(url + '/campaigns').then(_success).catch(error);
        }

        function createCampaign(name) {
            return $http.post(url + '/createcampaign', name).then(_success).catch(error);
        }

        function reasons() {
            return $http.get(url + '/reasons').then(_success).catch(error);
        }

        function save(mailer) {
            return $http.put(url, mailer).then(_success).catch(error);
        }

        function _success(response) {
            return response.data;
        }

        function error(error) {
            return error.data.message;
        }
    }
})();
//template.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'templateService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.Template;

        var service = {
            get: get,
            update: update,
            query: query
            //            remove: remove,
            //            save: save,
            //            search: search,
        }

        return service;

        function get() {
            return $http.get(url)
                .then(function (response) {
                    return response.data;
                });
        }

        function query(name) {
            return $http.get(url + '/' + name)
                .then(function (response) {
                    return response.data;
                });
        }

        function update(template) {
            return $http.put(url, template)
                .then(function (response) {
                    return response.data;
                });
        }
    }
})();
//user.service.js
//mark.lawrence

(function () {
    'use strict';

    var serviceId = 'userService';
    angular.module('app.service').factory(serviceId, serviceController);

    function serviceController(logger, $http, config) {
        logger.log(serviceId + ' loaded');
        var url = config.apiUrl + config.apiEndPoints.User;

        var service = {
            availableRoles: availableRoles,
            create: create,
            get: get,
            query: query,
            remove: remove,
            update: update
        }

        return service;

        function availableRoles() {
            return $http.get(url + '/roles').then(_success);
        }

        function create(user) {
            return $http.post(url, user).then(_success, function (error) {
                logger.log('error', error);
            });
        }

        function get() {
            return $http.get(url).then(_success);
        }

        function query(searchTerm) {
            var term = searchTerm === null ? '' : searchTerm;
            var searchUrl = url + '/search/' + term;

            return $http.get(searchUrl).then(_success);
        }

        function update(user) {
            return $http.put(url, user).then(_success);
        }

        function remove(id) {
            return $http.delete(url + '/' + id).then(_success);
        }

        function _success(response) {
            return response.data;
        }
    }
})();
(function () {
    'use strict'; 

    var controllerId = 'UserController';

    angular.module('app.users').controller(controllerId, UserController);

    UserController.$inject = ['logger', 'userService', 'defaults', 'config'];

    function UserController(logger, service, defaults, config) {
        var vm = this;
        vm.title = 'User Manager';
        vm.subTitle = 'Users';

        vm.description = 'Edit and update users';
        var keyCodes = config.keyCodes;

        vm.availableRoles = [];
        vm.clearCreate = clearCreate;
        vm.currentEdit = {};
        vm.isBusy = false;
        vm.lastDeleted = null;
        vm.lastUpdated = null;
        vm.itemToEdit = {};

        vm.user = {
            //userName: null,
            roles: ['user'],
            fullName: '',
            password: defaults.GENERIC_PASSWORD
        };

        vm.searchModel = {
            searchTerm: ''
        }

        var tableStateRef;

        activate();

        function activate() {
            logger.log(controllerId + ' activated');
            getAvailableRoles();
        };

        vm.addItem = function () {
            vm.user.fullName = parseFullName(vm.user.userName);
            vm.user.email = vm.user.userName + defaults.EMAIL_SUFFIX;
            service.create(vm.user)
                .then(function (data) {
                    //TODO: mapping would allow removal of extend method
                    vm.user = angular.extend(vm.user, data);
                    vm.users.unshift(angular.copy(vm.user));
                    logger.success('User ' + vm.user.userName + ' created!');
                    vm.user.userName = null;
                    //TODO: show error user already exists
                });
        };

        vm.cancelEdit = function (id) {
            vm.currentEdit[id] = false;
        };

        vm.deleteItem = function (user) {
            angular.copy(user, vm.lastDeleted = {});
            service.remove(user.id)
                .then(function (data) {
                    var idx = vm.users.indexOf(user);
                    vm.users.splice(idx, 1);
                });
        };

        vm.editItem = function (user) {
            vm.currentEdit[user.id] = true;
            angular.copy(user, vm.itemToEdit = {});
        };

        function getAvailableRoles() {
            service.availableRoles()
                .then(function (data) {
                    vm.availableRoles = data;
                });
        };

        vm.saveItem = function (user) {
            vm.isBusy = true;

            vm.currentEdit[user.id] = false;
            angular.copy(user, vm.lastUpdated = {});
            var roles = [];

            _.forEach(vm.itemToEdit.roles,
                function (role) {
                    roles.push(role.name);
                });
            vm.itemToEdit.roles = roles;

            service.update(vm.itemToEdit)
                .then(function (data) {
                    angular.extend(user, data);
                    logger.success('User ' + data.userName + ' updated!');
                    vm.isBusy = false;
                });
        };

        vm.search = function (tableState) {
            tableStateRef = tableState;
            if (vm.searchModel.searchTerm === undefined) vm.searchModel.searchTerm = '';

            vm.isBusy = true;
            service.query(vm.searchModel.searchTerm)
                .then(function (data) {
                    vm.users = data;
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        vm.undoDelete = function () {
            var roles = [];

            _.forEach(vm.lastDeleted.roles, function (role) {
                roles.push(role.name);
                logger.log('role', role.name);
            });
            vm.lastDeleted.roles = roles;
            vm.lastDeleted.password = defaults.GENERIC_PASSWORD;

            service.create(vm.lastDeleted).then(function (data) {
                logger.success('Successfully restored ' + data.userName);
                vm.users.unshift(data);
                vm.lastDeleted = null;
            });
        };

        vm.undoChange = function () {
            vm.isBusy = true;

            service.update(vm.lastUpdated)
                .then(function (data) {
                    angular.forEach(vm.users,
                        function (u, i) {
                            if (u.id === vm.lastUpdated.id) {
                                vm.users[i] = vm.lastUpdated;
                            }
                        });
                    logger.success('Successfully restored ' + data.userName);
                    vm.lastUpdated = null;
                })
                .finally(function () {
                    vm.isBusy = false;
                });
        };

        function clearCreate($event) {
            if ($event.keyCode === keyCodes.esc) {
                vm.user.userName = '';
            };
        };

        function parseFullName(name) {
            var arr = name.split('.');
            var fullname = '';

            _.forEach(arr, function (v) {
                fullname += _.capitalize(v) + ' ';
            });

            return _.trim(fullname);
        };
    };
})();
//# sourceMappingURL=data:application/json;base64,
